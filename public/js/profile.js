document.addEventListener("DOMContentLoaded", async () => {
    const token = localStorage.getItem("token");

    if (!token) {
        alert("–°–Ω–∞—á–∞–ª–∞ –≤–æ–π–¥–∏—Ç–µ –≤ –∞–∫–∫–∞—É–Ω—Ç!");
        window.location.href = "login.html";
        return;
    }

    // –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ
    try {
        const res = await fetch("/profile", {
            headers: { Authorization: `Bearer ${token}` }
        });
        if (!res.ok) throw new Error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –ø—Ä–æ—Ñ–∏–ª—è");

        const user = await res.json();
        document.getElementById("username").textContent = user.username;
        document.getElementById("email").textContent = user.email;
        document.getElementById("role").textContent = user.role === "admin" ? "üëë –ê–¥–º–∏–Ω" : "üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å";

    } catch (error) {
        console.error("–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –ø—Ä–æ—Ñ–∏–ª—è:", error);
        alert("–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –ø—Ä–æ—Ñ–∏–ª—è");
    }

    // –í—ã—Ö–æ–¥ –∏–∑ –∞–∫–∫–∞—É–Ω—Ç–∞
    document.getElementById("logout-btn").addEventListener("click", () => {
        localStorage.clear();
        alert("–í—ã –≤—ã—à–ª–∏!");
        window.location.href = "login.html";
    });

    // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø–∞—Ä–æ–ª—è
    document.getElementById("change-password").addEventListener("click", async () => {
        const newPassword = document.getElementById("new-password").value.trim();
        if (!newPassword) {
            alert("–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—ã–π –ø–∞—Ä–æ–ª—å!");
            return;
        }

        try {
            const res = await fetch("/update-password", {
                method: "POST",
                headers: {
                    "Content-Type": "application/json",
                    Authorization: `Bearer ${token}`
                },
                body: JSON.stringify({ newPassword })
            });

            if (res.ok) {
                alert("–ü–∞—Ä–æ–ª—å –æ–±–Ω–æ–≤–ª–µ–Ω!");
            } else {
                const errorData = await res.json();
                alert(errorData.error || "–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –ø–∞—Ä–æ–ª—è");
            }
        } catch (error) {
            console.error("–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –ø–∞—Ä–æ–ª—è:", error);
            alert("–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –ø–∞—Ä–æ–ª—è");
        }
    });
});
